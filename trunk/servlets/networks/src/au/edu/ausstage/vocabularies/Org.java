/*
 * This file is part of the AusStage RDF Vocabularies Package
 *
 * The AusStage RDF Vocabularies Package is free software: you can 
 * redistribute it and/or modify it under the terms of the GNU General 
 * Public License as published by the Free Software Foundation, either 
 * version 3 of the License, or (at your option) any later version.
 *
 * The AusStage RDF Vocabularies Package is distributed in the hope 
 * that it will be useful, but WITHOUT ANY WARRANTY; without even the 
 * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the AusStage RDF Vocabularies Package.  
 * If not, see <http://www.gnu.org/licenses/>.
*/

package au.edu.ausstage.vocabularies;
 
import com.hp.hpl.jena.rdf.model.*;
 
/**
 * Vocabulary definitions from http://www.w3.org/ns/org# 
 * @author Auto-generated by schemagen on 16 Jul 2010 13:17 
 */
public class Org {
    /** <p>The RDF model that holds the vocabulary terms</p> */
    private static Model m_model = ModelFactory.createDefaultModel();
    
    /** <p>The namespace of the vocabulary as a string</p> */
    public static final String NS = "http://www.w3.org/ns/org#";
    
    /** <p>The namespace of the vocabulary as a string</p>
     *  @see #NS */
    public static String getURI() {return NS;}
    
    /** <p>The namespace of the vocabulary as a resource</p> */
    public static final Resource NAMESPACE = m_model.createResource( NS );
    
    /** <p>Indicates the site at which a person is based. We do not restrict the possibility 
     *  that a person is based at multiple sites.</p>
     */
    public static final Property basedAt = m_model.createProperty( "http://www.w3.org/ns/org#basedAt" );
    
    /** <p>Indicates a change event which resulted in a change to this organization. 
     *  Depending on the event the organization may or may not have continued to exist 
     *  after the event. Inverse of `org:originalOrganzation`.</p>
     */
    public static final Property changedBy = m_model.createProperty( "http://www.w3.org/ns/org#changedBy" );
    
    /** <p>Indicates a classification for this Organization within some classification 
     *  scheme. Extension vocabularies may wish to specialize this property to have 
     *  a range corresponding to a specific `skos:ConceptScheme`. This property is 
     *  under discussion and may be revised or removed - in many cases organizations 
     *  are best categorized by defining a sub-class hierarchy in an extension vocabulary.</p>
     */
    public static final Property classification = m_model.createProperty( "http://www.w3.org/ns/org#classification" );
    
    /** <p>Indicates a person who is a member of the subject Organization. Inverse of 
     *  `org:memberOf`, see that property for further clarification. Provided for 
     *  compatibility with `foaf:member`.</p>
     */
    public static final Property hasMember = m_model.createProperty( "http://www.w3.org/ns/org#hasMember" );
    
    /** <p>Indicates a membership relationship that the Agent plays. Inverse of `org:member`.</p> */
    public static final Property hasMembership = m_model.createProperty( "http://www.w3.org/ns/org#hasMembership" );
    
    /** <p>Indicates a primary site for the Organization, this is the default means by 
     *  which an Organization can be contacted and is not necessarily the formal headquarters.</p>
     */
    public static final Property hasPrimarySite = m_model.createProperty( "http://www.w3.org/ns/org#hasPrimarySite" );
    
    /** <p>Indicates the legally registered site for the organization, in many legal 
     *  jurisdictions there is a requirement that FormalOrganizations such as Companies 
     *  or Charities have such a primary designed site.</p>
     */
    public static final Property hasRegisteredSite = m_model.createProperty( "http://www.w3.org/ns/org#hasRegisteredSite" );
    
    /** <p>Indicates a site at which the Organization has some presence even if only 
     *  indirect (e.g. virtual office or a professional service which is acting as 
     *  the registered address for a company). Inverse of `org:siteOf`.</p>
     */
    public static final Property hasSite = m_model.createProperty( "http://www.w3.org/ns/org#hasSite" );
    
    /** <p>Represents hierarchical containment of Organizations or OrganizationalUnits; 
     *  indicates an Organization which contains this Organization. Inverse of `org:subOrganizationOf`. 
     *  Alternative names: hasSubOrg</p>
     */
    public static final Property hasSubOrganization = m_model.createProperty( "http://www.w3.org/ns/org#hasSubOrganization" );
    
    /** <p>Indicates a unit which is part of this Organization, e.g. a Department within 
     *  a larger FormalOrganization. Inverse of `org:unitOf`.</p>
     */
    public static final Property hasUnit = m_model.createProperty( "http://www.w3.org/ns/org#hasUnit" );
    
    /** <p>Indicates that a person is the leader or formal head of the Organization. 
     *  This will normally mean that they are the root of the `org:reportsTo` (acyclic) 
     *  graph, though an organization may have more than one head.</p>
     */
    public static final Property headOf = m_model.createProperty( "http://www.w3.org/ns/org#headOf" );
    
    /** <p>Indicates an arbitrary relationship between two organizations. Specializations 
     *  of this can be used to, for example, denote funding or supply chain relationships.</p>
     */
    public static final Property linkedTo = m_model.createProperty( "http://www.w3.org/ns/org#linkedTo" );
    
    /** <p>Gives a location description for a person within the organization, for example 
     *  a _Mail Stop_ for internal posting purposes.</p>
     */
    public static final Property location = m_model.createProperty( "http://www.w3.org/ns/org#location" );
    
    /** <p>Indicates the Person (or other Agent including Organization) involved in the 
     *  Membership relationship. Inverse of `org:hasMembership`</p>
     */
    public static final Property member = m_model.createProperty( "http://www.w3.org/ns/org#member" );
    
    /** <p>Optional property to indicate the interval for which the membership is/was 
     *  valid.</p>
     */
    public static final Property memberDuring = m_model.createProperty( "http://www.w3.org/ns/org#memberDuring" );
    
    /** <p>Indicates that a person is a member of the Organization with no indication 
     *  of the nature of that membership or the role played. Note that the choice 
     *  of property name is not meant to limit the property to only formal membership 
     *  arrangements, it is also indended to cover related concepts such as affilliation 
     *  or other involvement in the organization. Extensions can specialize this relationship 
     *  to indicate particular roles within the organization or more nuanced relationships 
     *  to the organization. Has an optional inverse, `org:hasmember`.</p>
     */
    public static final Property memberOf = m_model.createProperty( "http://www.w3.org/ns/org#memberOf" );
    
    /** <p>Indicates Organization in which the Agent is a member.</p> */
    public static final Property organization = m_model.createProperty( "http://www.w3.org/ns/org#organization" );
    
    /** <p>Indicates one or more organizations that existed before the change event. 
     *  Depending on the event they may or may not have continued to exist after the 
     *  event. Inverse of `org:changedBy`. Note that in specializing the OPMV vocabulary 
     *  we are treating an `org:Organization` as an `opmv:Artifact`, which is consistent 
     *  with the OPM model.</p>
     */
    public static final Property originalOrganization = m_model.createProperty( "http://www.w3.org/ns/org#originalOrganization" );
    
    /** <p>Indicates the purpose of this Organization. There can be many purposes at 
     *  different levels of abstraction but the nature of an organization is to have 
     *  a reason for existence and this property is a means to document that reason. 
     *  An Organization may have multiple purposes. It is recommended that the purpose 
     *  be denoted by a controlled term or code list, ideally a `skos:Concept`. However, 
     *  the range is left open to allow for other types of descriptive schemes. It 
     *  is expected that specializations or application profiles of this vocabulary 
     *  will constrain the range of the purpose. Alternative names: _remit_ _responsibility_ 
     *  (esp. if applied to OrganizationalUnits such as Government Departments).</p>
     */
    public static final Property purpose = m_model.createProperty( "http://www.w3.org/ns/org#purpose" );
    
    /** <p>Indicates a salary or other reward associated with the role. Typically this 
     *  will be denoted using an existing representation scheme such as `gr:PriceSpecification` 
     *  but the range is left open to allow applications to specialize it (e.g. to 
     *  remunerationInGBP).</p>
     */
    public static final Property remuneration = m_model.createProperty( "http://www.w3.org/ns/org#remuneration" );
    
    /** <p>Indicates a reporting relationship as might be depicted on an organizational 
     *  chart. The precise semantics of the reporting relationship will vary by organization 
     *  but is intended to encompass both direct supervisory relationships (e.g. carrying 
     *  objective and salary setting authority) and more general reporting or accountability 
     *  relationships (e.g. so called _dotted line_ reporting).</p>
     */
    public static final Property reportsTo = m_model.createProperty( "http://www.w3.org/ns/org#reportsTo" );
    
    /** <p>Indicates an event which resulted in this organization. Note that in specializing 
     *  the OPMV vocabulary we are treating an `org:Organization` as an `opmv:Artifact`, 
     *  which is consistent with the OPM model. Inverse of `org:resultingOrganization`.</p>
     */
    public static final Property resultedFrom = m_model.createProperty( "http://www.w3.org/ns/org#resultedFrom" );
    
    /** <p>Indicates an organization which was created or changed as a result of the 
     *  event. Inverse of `org:resultedFrom`.</p>
     */
    public static final Property resultingOrganization = m_model.createProperty( "http://www.w3.org/ns/org#resultingOrganization" );
    
    /** <p>Indicates the Role that the Agent plays in a Membership relationship with 
     *  an Organization.</p>
     */
    public static final Property role = m_model.createProperty( "http://www.w3.org/ns/org#role" );
    
    /** <p>This is a metalevel property which is used to annotate an `org:Role` instance 
     *  with a sub-property of `org:memberOf` that can be used to directly indicate 
     *  the role for easy of query. The intended semantics is a Membership relation 
     *  involving the Role implies the existence of a direct property relationship 
     *  through an inference rule of the form: `{ [] org:member ?p; org:organization 
     *  ?o; org:role [org:roleProperty ?r] } -&gt; {?p ?r ?o}`.</p>
     */
    public static final Property roleProperty = m_model.createProperty( "http://www.w3.org/ns/org#roleProperty" );
    
    /** <p>Indicates a VCard (using the http://www.w3.org/TR/vcard-rdf/ vocabulary) for 
     *  the site. This can include email, telephone, and geo-location details as well 
     *  as an address.</p>
     */
    public static final Property siteAddress = m_model.createProperty( "http://www.w3.org/ns/org#siteAddress" );
    
    /** <p>Indicates an Organization which has some presence at the given site. This 
     *  is the inverse of `org:hasSite`.</p>
     */
    public static final Property siteOf = m_model.createProperty( "http://www.w3.org/ns/org#siteOf" );
    
    /** <p>Represents hierarchical containment of Organizations or Organizational Units; 
     *  indicates an organization which is a sub-part or child of this organization. 
     *  Inverse of `org:hasSubOrganization`.</p>
     */
    public static final Property subOrganizationOf = m_model.createProperty( "http://www.w3.org/ns/org#subOrganizationOf" );
    
    /** <p>The transitive closure of subOrganizationOf, giving a representation of all 
     *  organizations that contain this one. Note that technically this is a super 
     *  property of the transitive closure so it could contain additional assertions 
     *  but such usage is discouraged.</p>
     */
    public static final Property transitiveSubOrganizationOf = m_model.createProperty( "http://www.w3.org/ns/org#transitiveSubOrganizationOf" );
    
    /** <p>Indicates an Organization of which this Unit is a part, e.g. a Department 
     *  within a larger FormalOrganization. This is the inverse of `org:hasUnit`.</p>
     */
    public static final Property unitOf = m_model.createProperty( "http://www.w3.org/ns/org#unitOf" );
    
    /** <p>Represents an event which resulted in a major change to an organization such 
     *  as a merger or complete restructuring. It is intended for situations where 
     *  the resulting organization is sufficient distinct from the original organizations 
     *  that it has a distinct identity and distinct URI. Extension vocabularies should 
     *  define sub-classes of this to denote particular categories of event. The instant 
     *  or interval at which the event occurred should be given by `opmv:wasGeneratedAt`, 
     *  a description should be given by `dct:description`.</p>
     */
    public static final Resource ChangeEvent = m_model.createResource( "http://www.w3.org/ns/org#ChangeEvent" );
    
    /** <p>An Organization which is recognized in the world at large, in particular in 
     *  legal jurisdictions, with associated rights and responsibilities. Examples 
     *  include a Corporation, Charity, Government or Church. Note that this is a 
     *  super class of `gr:BusinessEntity` and it is recommended to use the GoodRelations 
     *  vocabulary to denote Business classifications such as DUNS or NAICS.</p>
     */
    public static final Resource FormalOrganization = m_model.createResource( "http://www.w3.org/ns/org#FormalOrganization" );
    
    /** <p>Indicates the nature of an Agent's membership of an organization. Represents 
     *  an n-ary relation between an Agent, an Organzation and a Role. It is possible 
     *  to directly indicate membership, independent of the specific Role, through 
     *  use of the `org:memberOf` property.</p>
     */
    public static final Resource Membership = m_model.createResource( "http://www.w3.org/ns/org#Membership" );
    
    /** <p>Represents a collection of people organized together into a community or other 
     *  social, commercial or political structure. The group has some common purpose 
     *  or reason for existence which goes beyond the set of people belonging to it 
     *  and can act as an Agent. Organizations are often decomposable into hierarchical 
     *  structures. It is recommended that SKOS lexical labels should be used to label 
     *  the Organization. In particular `skos:prefLabel` for the primary (possibly 
     *  legally recognized name), `skos:altLabel` for alternative names (trading names, 
     *  colloquial names) and `skos:notation` to denote a code from a code list. Alternative 
     *  names: _Collective_ _Body_ _Org_ _Group_</p>
     */
    public static final Resource Organization = m_model.createResource( "http://www.w3.org/ns/org#Organization" );
    
    /** <p>A collaboration between two or more Organizations such as a project. It meets 
     *  the criteria for being an Organization in that it has an identity and defining 
     *  purpose independent of its particular members but is neither a formally recognized 
     *  legal entity nor a sub-unit within some larger organization. Might typically 
     *  have a shorter lifetime than the Organizations within it, but not necessarily. 
     *  All members are `org:Organization`s rather than individuals and those Organizations 
     *  can play particular roles within the venture. Alternative names: _Project_ 
     *  _Venture_ _Endeavour_ _Consortium_ _Endeavour_</p>
     */
    public static final Resource OrganizationalCollaboration = m_model.createResource( "http://www.w3.org/ns/org#OrganizationalCollaboration" );
    
    /** <p>An Organization such as a University Support Unit which is part of some larger 
     *  FormalOrganization and only has full recognition within the context of that 
     *  FormalOrganization, it is not a Legal Entity in its own right. Units can be 
     *  large and complex containing other Units and even FormalOrganizations. Alternative 
     *  names: _OU_ _Unit_ _Department_</p>
     */
    public static final Resource OrganizationalUnit = m_model.createResource( "http://www.w3.org/ns/org#OrganizationalUnit" );
    
    /** <p>Denotes a role that a Person or other Agent can take in an organization. Instances 
     *  of this class describe the abstract role; to denote a specific instance of 
     *  a person playing that role in a specific organization use an instance of `org:Membership`. 
     *  It is common for roles to be arranged in some taxonomic structure and we use 
     *  SKOS to represent that. The normal SKOS lexical properties should be used 
     *  when labelling the Role. Additional descriptive properties for the Role, such 
     *  as a Salary band, may be added by extension vocabularies.</p>
     */
    public static final Resource Role = m_model.createResource( "http://www.w3.org/ns/org#Role" );
    
    /** <p>An office or other premise at which the organization is located. Many organizations 
     *  are spread across multiple sites and many sites will host multiple locations. 
     *  In most cases a Site will be a physical location. However, we don't exclude 
     *  the possibility of non-physical sites such as a virtual office with an associated 
     *  post box and phone reception service. Extensions may provide subclasses to 
     *  denote particular types of site.</p>
     */
    public static final Resource Site = m_model.createResource( "http://www.w3.org/ns/org#Site" );
    
    /** <p>A role corresponding to the `org:headOf` property</p> */
    public static final Resource Head = m_model.createResource( "http://www.w3.org/ns/org#Head" );
    
}
